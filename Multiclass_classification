-----------------------------------------MULTICLASS CLASSIFICATION-----------------------------------------------

import pandas as pd
from sklearn.metrics import confusion_matrix 
from sklearn.model_selection import train_test_split 

from google.colab import drive
drive.mount('/content/drive')

df = pd.read_csv("/content/drive/MyDrive/ME/Datasets_For_Practise/iris.csv")
print(df.head())
 >>>>OUTPUT
    sepal_length  sepal_width  petal_length  petal_width species
0           5.1          3.5           1.4          0.2  setosa
1           4.9          3.0           1.4          0.2  setosa
2           4.7          3.2           1.3          0.2  setosa
3           4.6          3.1           1.5          0.2  setosa
4           5.0          3.6           1.4          0.2  setosa

# X -> features, y -> label 
X = df.drop('species', axis=1)
y = df.species 

# dividing X, y into train and test data 
X_train, X_test, y_train, y_test = train_test_split(X, y, random_state = 0) 

Decision Tree
# training a DescisionTreeClassifier 
from sklearn.tree import DecisionTreeClassifier 
dtree_model = DecisionTreeClassifier(max_depth = 2).fit(X_train, y_train) 
dtree_predictions = dtree_model.predict(X_test)

# creating a confusion matrix 
cm = confusion_matrix(y_test, dtree_predictions)
print(cm)
>>>>OUTPUT   
[[13  0  0]
 [ 0 15  1]
 [ 0  3  6]]

from sklearn.metrics import accuracy_score
accuracy = accuracy_score(y_test, dtree_predictions)
print("Accuracy: ", accuracy)
>>>>OUTPUT
Accuracy:  0.8947368421052632

SVM
# training a linear SVM classifier 
from sklearn.svm import SVC 
svm_model_linear = SVC(kernel = 'linear', C = 1).fit(X_train, y_train) 
svm_predictions = svm_model_linear.predict(X_test) 

# model accuracy for X_test   
accuracy = svm_model_linear.score(X_test, y_test) 
print("Accuracy: ", accuracy)
>>>>OUTPUT
Accuracy:  0.9736842105263158

# creating a confusion matrix 
cm = confusion_matrix(y_test, svm_predictions) 
print(cm)
>>>>OUTPUT
[[13  0  0]
 [ 0 15  1]
 [ 0  0  9]]

KNN
# training a KNN classifier 
from sklearn.neighbors import KNeighborsClassifier 
knn = KNeighborsClassifier(n_neighbors = 7).fit(X_train, y_train)

# accuracy on X_test 
accuracy = knn.score(X_test, y_test) 
print("Accuracy: ",accuracy) 
>>>>OUTPUT
Accuracy:  0.9736842105263158

# creating a confusion matrix 
knn_predictions = knn.predict(X_test)  
cm = confusion_matrix(y_test, knn_predictions) 
print(cm)
>>>>OUTPUT
[[13  0  0]
 [ 0 15  1]
 [ 0  0  9]]

Naive Bayes
# training a Naive Bayes classifier 
from sklearn.naive_bayes import GaussianNB 
gnb = GaussianNB().fit(X_train, y_train) 
gnb_predictions = gnb.predict(X_test) 

# accuracy on X_test 
accuracy = gnb.score(X_test, y_test) 
print("Accuracy: ",accuracy)
>>>>OUTUT
Accuracy:  1.0

# creating a confusion matrix 
cm = confusion_matrix(y_test, gnb_predictions) 
print(cm)
>>>>OUTPUT 
[[13  0  0]
 [ 0 16  0]
 [ 0  0  9]]
